{"ast":null,"code":"import { AUTH_SUCCESS, ERROR_MSG } from './action-type';\nimport { reqLogin, reqRegister } from '../api/index'; //授权成功的同步action\n\nconst authSuccess = user => ({\n  type: AUTH_SUCCESS,\n  data: user\n}); // 错误提示信息的同步action\n\n\nconst errorMsg = message => ({\n  type: ERROR_MSG,\n  data: message\n});\n\nexport const register = user => {\n  const username = user.username,\n        password = user.password,\n        password2 = user.password2,\n        type = user.type; //做表单的前台检查，如果不通过，返回一个errorMsg的同步action\n\n  if (!username) {\n    return errorMsg('用户名不能为空');\n  }\n\n  if (!password) {\n    return errorMsg('密码不能为空');\n  }\n\n  if (password !== password2) {\n    return errorMsg('2次密码不一致');\n  }\n\n  return async dispatch => {\n    const response = await reqRegister({\n      username,\n      password,\n      type\n    });\n    const result = response.data;\n\n    if (result.code === 200) {\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.message));\n    }\n  };\n};\nexport const login = user => {\n  const username = user.username,\n        password = user.password;\n\n  if (!username) {\n    return errorMsg('用户名不能为空');\n  }\n\n  if (!password) {\n    return errorMsg('密码不能为空');\n  }\n\n  return async dispatch => {\n    const response = await reqLogin({\n      username,\n      password\n    });\n    const result = response.data;\n\n    if (result.code === 200) {\n      dispatch(authSuccess(result.data));\n    } else {\n      dispatch(errorMsg(result.message));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/gongjin/react/zp-client/src/redux/actions.js"],"names":["AUTH_SUCCESS","ERROR_MSG","reqLogin","reqRegister","authSuccess","user","type","data","errorMsg","message","register","username","password","password2","dispatch","response","result","code","login"],"mappings":"AACA,SAASA,YAAT,EAAuBC,SAAvB,QAAwC,eAAxC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC,C,CAGA;;AACA,MAAMC,WAAW,GAAIC,IAAD,KAAW;AAACC,EAAAA,IAAI,EAAEN,YAAP;AAAqBO,EAAAA,IAAI,EAAEF;AAA3B,CAAX,CAApB,C,CACA;;;AACA,MAAMG,QAAQ,GAAIC,OAAD,KAAc;AAACH,EAAAA,IAAI,EAAEL,SAAP;AAAkBM,EAAAA,IAAI,EAAEE;AAAxB,CAAd,CAAjB;;AAGA,OAAO,MAAMC,QAAQ,GAAGL,IAAD,IAAS;AAAA,QACrBM,QADqB,GACoBN,IADpB,CACrBM,QADqB;AAAA,QACVC,QADU,GACoBP,IADpB,CACVO,QADU;AAAA,QACAC,SADA,GACoBR,IADpB,CACAQ,SADA;AAAA,QACWP,IADX,GACoBD,IADpB,CACWC,IADX,EAE5B;;AACA,MAAG,CAACK,QAAJ,EAAa;AACT,WAAOH,QAAQ,CAAC,SAAD,CAAf;AACH;;AACD,MAAG,CAACI,QAAJ,EAAa;AACT,WAAOJ,QAAQ,CAAC,QAAD,CAAf;AACH;;AACD,MAAGI,QAAQ,KAAKC,SAAhB,EAA0B;AACtB,WAAOL,QAAQ,CAAC,SAAD,CAAf;AACH;;AACD,SAAO,MAAMM,QAAN,IAAiB;AACpB,UAAMC,QAAQ,GAAG,MAAMZ,WAAW,CAAC;AAACQ,MAAAA,QAAD;AAAYC,MAAAA,QAAZ;AAAsBN,MAAAA;AAAtB,KAAD,CAAlC;AACA,UAAMU,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACC,QAAGS,MAAM,CAACC,IAAP,KAAgB,GAAnB,EAAuB;AACpBH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACF,KAFD,MAEK;AACFO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,OAAR,CAAT,CAAR;AACF;AACL,GARD;AASH,CArBM;AAuBP,OAAO,MAAMS,KAAK,GAAIb,IAAD,IAAS;AAAA,QACnBM,QADmB,GACKN,IADL,CACnBM,QADmB;AAAA,QACRC,QADQ,GACKP,IADL,CACRO,QADQ;;AAE1B,MAAG,CAACD,QAAJ,EAAa;AACT,WAAOH,QAAQ,CAAC,SAAD,CAAf;AACH;;AACD,MAAG,CAACI,QAAJ,EAAa;AACT,WAAOJ,QAAQ,CAAC,QAAD,CAAf;AACH;;AAED,SAAO,MAAMM,QAAN,IAAiB;AACpB,UAAMC,QAAQ,GAAG,MAAMb,QAAQ,CAAC;AAACS,MAAAA,QAAD;AAAYC,MAAAA;AAAZ,KAAD,CAA/B;AACA,UAAMI,MAAM,GAAGD,QAAQ,CAACR,IAAxB;;AACC,QAAGS,MAAM,CAACC,IAAP,KAAgB,GAAnB,EAAuB;AACpBH,MAAAA,QAAQ,CAACV,WAAW,CAACY,MAAM,CAACT,IAAR,CAAZ,CAAR;AACF,KAFD,MAEK;AACFO,MAAAA,QAAQ,CAACN,QAAQ,CAACQ,MAAM,CAACP,OAAR,CAAT,CAAR;AACF;AACL,GARD;AASH,CAlBM","sourcesContent":["\nimport { AUTH_SUCCESS, ERROR_MSG } from './action-type'\nimport { reqLogin, reqRegister } from '../api/index'\n\n\n//授权成功的同步action\nconst authSuccess = (user) => ({type: AUTH_SUCCESS, data: user}) \n// 错误提示信息的同步action\nconst errorMsg = (message) => ({type: ERROR_MSG, data: message})\n\n\nexport const register =(user) =>{\n    const {username , password, password2, type } = user\n    //做表单的前台检查，如果不通过，返回一个errorMsg的同步action\n    if(!username){\n        return errorMsg('用户名不能为空')\n    }\n    if(!password){\n        return errorMsg('密码不能为空')\n    }\n    if(password !== password2){\n        return errorMsg('2次密码不一致')\n    }\n    return async dispatch =>{\n        const response = await reqRegister({username , password, type})\n        const result = response.data\n         if(result.code === 200){\n            dispatch(authSuccess(result.data))\n         }else{\n            dispatch(errorMsg(result.message))\n         }\n    }\n}\n\nexport const login = (user) =>{\n    const {username , password } = user\n    if(!username){\n        return errorMsg('用户名不能为空')\n    }\n    if(!password){\n        return errorMsg('密码不能为空')\n    }\n\n    return async dispatch =>{\n        const response = await reqLogin({username , password })\n        const result = response.data\n         if(result.code === 200){\n            dispatch(authSuccess(result.data))\n         }else{\n            dispatch(errorMsg(result.message))\n         }\n    }\n}"]},"metadata":{},"sourceType":"module"}